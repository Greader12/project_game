import axios from "axios";

const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "/api",  // üöÄ <-- –°–Æ–î–ê
  withCredentials: true
});

// –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("access_token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ‚Äî –ª–æ–≤–∏–º 401 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—à–∏–±–∫–∞ 401 –∏ –º—ã –µ—â—ë –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        const refreshResponse = await axios.post(
          import.meta.env.VITE_API_URL + '/token/refresh',
          {},
          { withCredentials: true }
        );
        const newToken = refreshResponse.data.access_token;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        localStorage.setItem('access_token', newToken);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        originalRequest.headers.Authorization = `Bearer ${newToken}`;

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω ‚Äî —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
        localStorage.removeItem('access_token');
        window.location.href = "/login";
        return Promise.reject(refreshError);
      }
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ 401 –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è
    return Promise.reject(error);
  }
);

export default axiosInstance;
